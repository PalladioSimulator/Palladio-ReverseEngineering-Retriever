# A GitHub Action that allows to run the Retriever on arbitrary GitHub repositories.

name: "Run Retriever"
description: |
  'Reverse-engineers a project''s source into a Palladio Component Model.
  Uploads the PCM as an artifact called `retriever`.
  Within that artifact, the PCM is located at the input `source_path`,
  e.g. for `source_path=MyProject/Repository` the output is `[retriever]/MyProject/Repository/repository.pcm`.'

inputs:
  source_path:
    description: "The location of the project to reverse-engineer"
    required: true
    default: "."
  rules:
    description: "The rules to reverse-engineer with, as a comma-separated list"
    required: true
    default: "org.palladiosimulator.retriever.extraction.rules.maven,org.palladiosimulator.retriever.extraction.rules.spring"
  rules_path:
    description: "The location of additional project specific rules"
    required: false
    default: "."
  benchmark:
    description: "Whether use hyperfine to benchmark the execution of the retriever, otherwise just the one time execution time is reported"
    required: false
    default: "false"

runs:
  using: "composite"
  steps:
    - name: Set Up JDK 17
      uses: actions/setup-java@v3
      with:
        distribution: "temurin"
        java-version: "17"

    - name: Create temporary directory
      shell: bash
      run: |
        TMP_DIR=$(mktemp -d)
        echo "tmp_dir=$TMP_DIR" >> $GITHUB_ENV
        mkdir $TMP_DIR/retriever_out

    - name: Gather Git Repository Info
      shell: bash
      run: |
        GIT_INFO_FILE=${{ env.tmp_dir }}/retriever_out/git_info.md
        cd "${{ github.workspace }}/${{ inputs.source_path }}"
        echo "GIT_INFO_FILE=$GIT_INFO_FILE" >> $GITHUB_ENV
        {
          echo "# Git repository information"
          echo "|    |    |"
          echo "|--- | ---|"
          echo "| Repository URL | $(git config --get remote.origin.url) |"
          echo "| Branch         | $(git branch --show-current) |"
          echo "| Commit         | $(git log -1 --pretty=format:"%H") |"
          echo "| Date           | $(date -u) |"
        } > $GIT_INFO_FILE
    
    - name: Install Neofetch
      shell: bash
      run: sudo apt-get install -y neofetch
    
    - name: Gather Specific System Information with Neofetch
      shell: bash
      run: |
        SYSTEM_INFO_FILE=${{ env.tmp_dir }}/retriever_out/system_info.md
        echo "SYSTEM_INFO_FILE=$SYSTEM_INFO_FILE" >> $GITHUB_ENV
        {
          echo "# System information"
          echo "| Attribute | Value |"
          echo "| --------- | ----- |"
          neofetch os distro kernel cpu gpu memory --stdout | \
          sed -E 's/^(os): (.*)$/| OS | \2 |/; s/^(distro): (.*)$/| Distro | \2 |/; s/^(kernel): (.*)$/| Kernel | \2 |/; s/^(cpu): (.*)$/| CPU | \2 |/; s/^(gpu): (.*)$/| GPU | \2 |/; s/^(memory): (.*)$/| Memory | \2 |/'
        } > $SYSTEM_INFO_FILE
    
    - name: Install cloc
      shell: bash
      run: |
        sudo apt install cloc

    - name: Run cloc analysis
      shell: bash
      run: |
        CLOC_INFO_FILE=${{ env.tmp_dir }}/retriever_out/cloc.md
        echo "CLOC_INFO_FILE=$CLOC_INFO_FILE" >> $GITHUB_ENV
        {
          echo "# Cloc analysis"
          cloc ${{ inputs.source_path }} --unicode --autoconf --diff-timeout 300 --docstring-as-code --read-binary-files --md --quiet | \
          sed -e '1d; 2s/cloc|github.com\/AlDanial\///; /^--- | ---$/d'
        } > $CLOC_INFO_FILE

    - name: Get action version
      shell: bash
      # Assuming a format like in the GitHub Actions documentation:
      # /home/runner/work/_actions/repo-owner/name-of-action-repo/v1
      # There, the 7th segment is the action's tag. This is bumped up
      # to 8 since `cut` counts the empty string before the first / as well.
      run: |
        ACTION_VERSION=$(echo ${{ github.action_path }} | cut -d / -f 8- -)
        echo "action_version=$ACTION_VERSION" >>  $GITHUB_ENV

    - name: Download latest Retriever
      if: env.action_version == 'main'
      shell: bash
      run: |
        curl -s ${{ github.api_url }}/repos/PalladioSimulator/Palladio-ReverseEngineering-Retriever/releases/latest \
          | grep -E 'browser_download_url' \
          | grep linux \
          | grep x86_64 \
          | grep -Eo 'https://[^\"]*' \
          | xargs wget -O "${{ env.tmp_dir }}/retriever.zip"

    - name: Download Retriever
      if: env.action_version != 'main'
      shell: bash
      # Downloads the Retriever with the same version that this action has
      # (not necessarily the most recent one!).
      run: |
        curl -s ${{ github.api_url }}/repos/PalladioSimulator/Palladio-ReverseEngineering-Retriever/releases/tags/${{ env.action_version }} \
          | grep -E 'browser_download_url' \
          | grep linux \
          | grep x86_64 \
          | grep -Eo 'https://[^\"]*' \
          | xargs wget -O "${{ env.tmp_dir }}/retriever.zip"

    - name: Extract Retriever
      shell: bash
      working-directory: ${{ env.tmp_dir }}
      run: unzip retriever.zip -d retriever

    - name: Install Hyperfine
      if: inputs.benchmark == 'true'
      shell: bash
      run: |
        wget https://github.com/sharkdp/hyperfine/releases/download/v1.16.1/hyperfine_1.16.1_amd64.deb
        sudo dpkg -i hyperfine_1.16.1_amd64.deb

    - name: Execute Retriever
      shell: bash
      working-directory: ${{ env.tmp_dir }}/retriever
      env:
        RETRIEVER_COMMAND: './eclipse -nosplash -i "${{ github.workspace }}/${{ inputs.source_path }}" -o "${{ env.tmp_dir }}/eclipse_tmp" -r "${{ inputs.rules }}"'
        TIMING_INFO_FILE: ${{ env.tmp_dir }}/retriever_out/timing.md
      run: |
        echo "TIMING_INFO_FILE=$TIMING_INFO_FILE" >> $GITHUB_ENV
        mkdir "${{ env.tmp_dir }}/eclipse_tmp"
        if [ "${{ inputs.benchmark }}" = "true" ]; then
          # Execute with Hyperfine
          hyperfine \
            --warmup 3 \
            --runs 10 \
            --show-output \
            --ignore-failure \
            --export-markdown $TIMING_INFO_FILE \
            --prepare 'sleep 1; \
            rm -rf "${{ env.tmp_dir }}/eclipse_tmp"; sleep 1; \
            rm -rf "${{ env.tmp_dir }}/retriever/workspace"; sleep 1; \
            echo "cleanup done"' \
            "$RETRIEVER_COMMAND"
          
          # Remove the first column from the table using sed
          sed -i 's/^[^|]*|[^|]*|/|/' $TIMING_INFO_FILE
          {
            echo "# Retriever execution time"
            cat $TIMING_INFO_FILE
          } > "${TIMING_INFO_FILE}.tmp" && mv "${TIMING_INFO_FILE}.tmp" "$TIMING_INFO_FILE"
                    
        else
          # Execute with /usr/bin/time
          /usr/bin/time -p -o "$TIMING_INFO_FILE" $RETRIEVER_COMMAND
          # Read and reformat the timing information
          {
            echo "# Retriever execution time"
            echo "| Metric | Time (seconds) |"
            echo "| --- | ---: |"
            while IFS= read -r line; do
              case "$line" in
                real*) echo "| Real CPU Time | ${line#* } |" ;;
                user*) echo "| User CPU Time | ${line#* } |" ;;
                sys*) echo "| System CPU Time | ${line#* } |" ;;
              esac
            done < "$TIMING_INFO_FILE"
            echo "<!--"
            echo "Explainations:"
            echo "- __Real CPU Time__: actual time the command has run (can be less than total time spent in user and system mode for multi-threaded processes)"
            echo "- __User CPU Time__: time the command has spent running in user mode"
            echo "- __System CPU Time__: time the command has spent running in system or kernel mode"
            echo "-->"
          } > "${TIMING_INFO_FILE}.tmp" && mv "${TIMING_INFO_FILE}.tmp" "$TIMING_INFO_FILE"
        fi

        mv ${{ env.tmp_dir }}/eclipse_tmp/* ${{ env.tmp_dir }}/retriever_out/
    
    - name: Combine and Clean Up Files
      shell: bash
      run: |
        # Combine files into one, with empty lines between file contents
        {
          cat $GIT_INFO_FILE
          echo
          cat $SYSTEM_INFO_FILE
          echo
          cat $TIMING_INFO_FILE
          echo
          cat $CLOC_INFO_FILE
        } > ${{ env.tmp_dir }}/retriever_out/report.md
        # Delete the original files
        rm -f $GIT_INFO_FILE $SYSTEM_INFO_FILE $CLOC_INFO_FILE $TIMING_INFO_FILE


    - name: Prepare analysis results for upload
      shell: bash
      working-directory: ${{ env.tmp_dir }}
      run: |
        mkdir -p tmp/${{ inputs.source_path }}
        mv retriever_out/* tmp/${{ inputs.source_path }}
        mv tmp/* retriever_out
        rmdir tmp

    - name: Upload analysis results
      uses: actions/upload-artifact@v4
      with:
        name: retriever
        path: ${{ env.tmp_dir }}/retriever_out

    - name: Prepare Eclipse logs for upload
      if: failure()
      shell: bash
      working-directory: ${{ env.tmp_dir }}
      run: |
        mkdir -p eclipse_logs/${{ inputs.source_path }}
        mv retriever/configuration/*.log retriever/workspace/.metadata/.log eclipse_logs/${{ inputs.source_path }}

    - name: Upload Eclipse logs
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: eclipse_logs
        path: ${{ env.tmp_dir }}/eclipse_logs

    - name: Delete temporary directory
      if: always()
      shell: bash
      run: rm -rf ${{ env.tmp_dir }}
